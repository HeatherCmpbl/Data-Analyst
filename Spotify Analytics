--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata 
(id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)

SELECT * 
FROM BIT_DB.Spotifydata;

--What are the top 10 songs and by which artists?
SELECT track_name, popularity, artist_name
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

--What 3 songs have the highest energy and danceability?
SELECT track_name, energy, danceability
FROM BIT_DB.Spotifydata
ORDER BY energy AND danceability DESC
LIMIT 3;

--Which artist has the most popular songs and what are they?
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc;

--Which song has the most words, but only the 3 most popular.
SELECT track_name, speechiness AS lyric_ratio, popularity
FROM BIT_DB.Spotifydata
HAVING MAX(lyric_ratio)
ORDER BY popularity
LIMIT 3;

--Which artist has the most songs?
SELECT artist_name, COUNT (*)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(artist_name)>1;
ORDER BY COUNT(artist_name) DESC
